@page "/clients"

@using DataLibrary
@using dotNet_project.Models
@using Microsoft.Extensions.Configuration

@inject IDataAcces _data
@inject IConfiguration _config


<h1>Clients</h1>

<button style="margin: 5px" class="btn btn-primary" @onclick="InsertData">Add Client</button>

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td><b>First Name</b></td>
                <td><b>Last Name</b></td>
                <td><b>Operations</b></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
            <tr>
                <td>@client.FirstName</td>
                <td>@client.LastName</td>

                <td>
                <button style="margin: 5px;" class="btn btn-warning" @onclick="UpdateData">Update</button>
                <button style="margin: 5px; align-content:end;" class="btn btn-danger" @onclick="DeleteData">Delete</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<ClientModel> clients;
    private async Task InsertData()
    {
        string sql = "INSERT INTO clients (FirstName, LastName) VALUES (@FirstName, @LastName);";

        await _data.SaveData(sql, new { FirstName = "Thomas", LastName = "Bison" }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task UpdateData()
    {
        string sql = "UPDATE clients set FirstName = @FirstName where LastName = @LastName";

        await _data.SaveData(sql, new { FirstName = "Denko", LastName = "Corey" }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task DeleteData()
    {
        string sql = "DELETE FROM clients WHERE FirstName = @FirstName";

        await _data.SaveData(sql, new { FirstName = "Thomas" }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM clients";
        clients = await _data.LoadData<ClientModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }
}
