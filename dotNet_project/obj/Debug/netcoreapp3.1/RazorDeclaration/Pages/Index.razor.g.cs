// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace dotNet_project.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using dotNet_project;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\_Imports.razor"
using dotNet_project.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\Pages\Index.razor"
using DataLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\Pages\Index.razor"
using DataLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\Pages\Index.razor"
using dotNet_project.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 96 "D:\-EMTE-\4.ev\4_II\.NET\dotNet_project\dotNet_project\dotNet_project\Pages\Index.razor"
      
    private ClientBarCodeModel searchBarCode = new ClientBarCodeModel();
    private InfoClientModel client = new InfoClientModel();
    private InfoClientsPassModel clientData;

    private string hasActivePassColor;

    private bool clientExists = true;
    private bool clientHasValidPass = true;
    private bool succesfullEntry = false;

    private void SearchClient()
    {
        clientHasValidPass = true;
        succesfullEntry = false;
        clientExists = true;
        client = _dbC.GetClientInfoByBarCode(searchBarCode.BarCode);

        if (client.ClientId == 0)
        {
            ClientModel clientNoPass = _dbC.GetClientByBarCode(searchBarCode.BarCode);

            if (clientNoPass == null)
            {
                clientExists = false;
            }
            else
            {
                InfoClientModel c = new InfoClientModel
                {
                    ClientId = clientNoPass.ClientId,
                    Name = clientNoPass.Name,
                    PhoneNumber = clientNoPass.PhoneNumber,
                    EmailAddress = clientNoPass.EmailAddress,
                    is_deleted = clientNoPass.is_deleted,
                    Photo = clientNoPass.Photo,
                    CreatedDate = clientNoPass.CreatedDate,
                    CNP = clientNoPass.CNP,
                    Address = clientNoPass.Address,
                    BarCode = clientNoPass.BarCode,
                    Notes = clientNoPass.Notes,
                    NumberOfPasses = 0,
                    HasActivePass = 0,
                    PassExpiration = "-",
                };
                client = c;
            }

        }

        SetActivePassColor();
    }

    private void SetActivePassColor()
    {
        if (client.HasActivePassBool)
        {
            hasActivePassColor = "green";
        }
        else
        {
            hasActivePassColor = "red";
        }
    }

    private async Task LetInClient(InfoClientModel client)
    {
        clientExists = true;
        clientHasValidPass = true;
        succesfullEntry = false;
        List<InfoClientsPassModel> clientDataList = await _dbCP.GetInfoClientsPass(client);

        clientData = clientDataList[0];

        // Checks if Client's active Pass is eligible for entry
        if (clientData.DaysLeft == 0)
        {
            clientHasValidPass = false;
        }
        else
        {
            if (clientData.EntiresLeft == 0)
            {
                clientHasValidPass = false;
            }
            else
            {
                // Client is eligible, increments EntriuesCount
                if (clientData.EntriesUntilExpires != -1)
                {
                    clientData.EntriesCount++;
                    ClientsPassesModel c = new ClientsPassesModel
                    {
                        ClientsPassesId = clientData.ClientsPassesId,
                        ClientId = clientData.ClientId,
                        PassId = clientData.PassId,
                        BuyDate = clientData.BuyDate,
                        BarCode = clientData.BarCode,
                        EntriesCount = clientData.EntriesCount,
                        HallId = clientData.HallId
                    };

                    await _dbCP.UpdateClientsEntriesCount(c);
                }

                //Record Entry
                EntryModel entry = new EntryModel
                {
                    ClientId = clientData.ClientId,
                    PassId = clientData.PassId,
                    Date = DateTime.UtcNow.ToString("yyyy-MM-dd"),
                    BarCode = clientData.BarCode,
                    HallId = clientData.HallId
                };

                succesfullEntry = true;
                client.ClientId = 0;
                searchBarCode = new ClientBarCodeModel();
                await _dbE.InsertEntry(entry);
            }
        }

    }

    void ManagePasses(InfoClientModel client)
    {
        NavigationManager.NavigateTo("/clients/passes/" + client.ClientId);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IClientsPassesData _dbCP { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IEntriesData _dbE { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IClientsData _dbC { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
