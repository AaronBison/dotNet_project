@page "/"

@using DataLibrary
@using DataLibrary.Models
@using dotNet_project.Models

@inject NavigationManager NavigationManager
@inject IClientsData _dbC
@inject IEntriesData _dbE
@inject IClientsPassesData _dbCP

<h1>Welcome, Admin</h1>

<hr />
<h3>Search Client</h3>
<hr />

<EditForm Model="@searchBarCode" OnValidSubmit="@SearchClient" style="width:400px; margin:15px;">

    <h6><b>Enter Bar Code:</b></h6>
    <InputText class="form-control" style="margin: 10px;" placeholder="Bar Code" id="barcode" @bind-Value="searchBarCode.BarCode" Label="Name" />

    <button type="submit" class="btn btn-success" style="margin: 10px;">Search</button>

</EditForm>

@if (!clientExists)
{
    <div class="alert alert-danger" role="alert">
        There is no such client in the database!
    </div>
}
@if (!clientHasValidPass)
{
    <div class="alert alert-danger" role="alert">
        Clients Pass is invalid!
    </div>
}
@if (succesfullEntry)
{
    <div class="alert alert-success" role="alert">
        Succesfull entry! Welcome!
    </div>
}

@if (client.ClientId != 0)
{
    <div class="card" style="width: 25rem;">
        <img class="card-img-top" src="https://picsum.photos/400/200" alt="Profile picture">

        <div class="card-body">
            <h5 class="card-title">@client.Name</h5>
            <table>
                <tbody>
                    <tr>
                        <td><p class="card-text"><b>Phone number: </b></p></td>
                        <td><p class="card-text">@client.PhoneNumber</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Email address: </b></p></td>
                        <td><p class="card-text">@client.EmailAddress</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>CNP: </b></p></td>
                        <td><p class="card-text">@client.CNP</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Address: </b></p></td>
                        <td><p class="card-text">@client.Address</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Number of passes: </b></p></td>
                        <td><p class="card-text">@client.NumberOfPasses</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Has active pass: </b></p></td>
                        <td><p class="card-text" style="color:@hasActivePassColor;"><b>@client.HasActivePassBool</b></p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Pass expiration: </b></p></td>
                        <td><p class="card-text">@client.PassExpiration</p></td>
                    </tr>
                    <tr>
                        <td><p class="card-text"><b>Notes: </b></p></td>
                        <td><p class="card-text">@client.Notes</p></td>
                    </tr>
                </tbody>
            </table>
            <hr />
            <button class="btn btn-outline-primary" @onclick="() => LetInClient(client)" style="margin: 10px;">Let in</button>
            <button class="btn btn-warning" @onclick="() => ManagePasses(client)" style="margin: 10px;">Manage Passes</button>
        </div>
    </div>
}

@code{
    private ClientBarCodeModel searchBarCode = new ClientBarCodeModel();
    private InfoClientModel client = new InfoClientModel();
    private InfoClientsPassModel clientData;

    private string hasActivePassColor;

    private bool clientExists = true;
    private bool clientHasValidPass = true;
    private bool succesfullEntry = false;

    private void SearchClient()
    {
        clientHasValidPass = true;
        succesfullEntry = false;
        clientExists = true;
        client = _dbC.GetClientInfoByBarCode(searchBarCode.BarCode);

        if (client.ClientId == 0)
        {
            ClientModel clientNoPass = _dbC.GetClientByBarCode(searchBarCode.BarCode);

            if (clientNoPass == null)
            {
                clientExists = false;
            }
            else
            {
                InfoClientModel c = new InfoClientModel
                {
                    ClientId = clientNoPass.ClientId,
                    Name = clientNoPass.Name,
                    PhoneNumber = clientNoPass.PhoneNumber,
                    EmailAddress = clientNoPass.EmailAddress,
                    is_deleted = clientNoPass.is_deleted,
                    Photo = clientNoPass.Photo,
                    CreatedDate = clientNoPass.CreatedDate,
                    CNP = clientNoPass.CNP,
                    Address = clientNoPass.Address,
                    BarCode = clientNoPass.BarCode,
                    Notes = clientNoPass.Notes,
                    NumberOfPasses = 0,
                    HasActivePass = 0,
                    PassExpiration = "-",
                };
                client = c;
            }

        }

        SetActivePassColor();
    }

    private void SetActivePassColor()
    {
        if (client.HasActivePassBool)
        {
            hasActivePassColor = "green";
        }
        else
        {
            hasActivePassColor = "red";
        }
    }

    private async Task LetInClient(InfoClientModel client)
    {
        clientExists = true;
        clientHasValidPass = true;
        succesfullEntry = false;
        List<InfoClientsPassModel> clientDataList = await _dbCP.GetInfoClientsPass(client);

        clientData = clientDataList[0];

        // Checks if Client's active Pass is eligible for entry
        if (clientData.DaysLeft == 0)
        {
            clientHasValidPass = false;
        }
        else
        {
            if (clientData.EntiresLeft == 0)
            {
                clientHasValidPass = false;
            }
            else
            {
                // Client is eligible, increments EntriuesCount
                if (clientData.EntriesUntilExpires != -1)
                {
                    clientData.EntriesCount++;
                    ClientsPassesModel c = new ClientsPassesModel
                    {
                        ClientsPassesId = clientData.ClientsPassesId,
                        ClientId = clientData.ClientId,
                        PassId = clientData.PassId,
                        BuyDate = clientData.BuyDate,
                        BarCode = clientData.BarCode,
                        EntriesCount = clientData.EntriesCount,
                        HallId = clientData.HallId
                    };

                    await _dbCP.UpdateClientsEntriesCount(c);
                }

                //Record Entry
                EntryModel entry = new EntryModel
                {
                    ClientId = clientData.ClientId,
                    PassId = clientData.PassId,
                    Date = DateTime.UtcNow.ToString("yyyy-MM-dd"),
                    BarCode = clientData.BarCode,
                    HallId = clientData.HallId
                };

                succesfullEntry = true;
                client.ClientId = 0;
                searchBarCode = new ClientBarCodeModel();
                await _dbE.InsertEntry(entry);
            }
        }

    }

    void ManagePasses(InfoClientModel client)
    {
        NavigationManager.NavigateTo("/clients/passes/" + client.ClientId);
    }
}